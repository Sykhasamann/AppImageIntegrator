import argparse
import shutil
from pathlib import Path

from app_integrator import core, extractor, desktop_entry


def main():
    parser = argparse.ArgumentParser(description="Int√©grateur d'AppImage")
    parser.add_argument("appimage", nargs="?", help="Chemin vers le fichier .AppImage √† int√©grer")
    parser.add_argument("--uninstall", metavar="FICHIER", help="D√©sinstalle une AppImage (nom du fichier dans ~/Applications)")
    parser.add_argument("--list", action="store_true", help="Liste les AppImages int√©gr√©es")
    parser.add_argument("--info", metavar="FICHIER", help="Affiche les d√©tails d'une AppImage int√©gr√©e")

    args = parser.parse_args()

    # D√©sinstallation
    if args.uninstall:
        removed = core.uninstall_appimage(args.uninstall)
        if removed:
            print("[‚úì] √âl√©ments supprim√©s :")
            for r in removed:
                print(f" - {r}")
        else:
            print("[!] Aucun fichier trouv√© √† supprimer.")
        return
    
    # Liste
    if args.list:
        installed = core.list_installed_appimages()
        if not installed:
            print("[!] Aucune AppImage int√©gr√©e trouv√©e.")
            return
        
        print("[‚úì] AppImages int√©gr√©es :")
        for item in installed:
            print(f"- {item['name']}")
            print(f"  ‚Ü≥ .desktop : {'‚úÖ' if item['desktop_exists'] else '‚ùå'}")
            print(f"  ‚Ü≥ ic√¥ne   : {'‚úÖ' if item['icon_exists'] else '‚ùå'}")
        return
    
    # Infos

    if args.info:
        info = core.get_appimage_info(args.info)
        print("[‚ÑπÔ∏è] D√©tails de l‚ÄôAppImage :")

        if info["appimage_path"]:
            print(f"  üì¶ AppImage : {info['appimage_path']}")
        else:
            print("  üì¶ AppImage : ‚ùå introuvable")

        if info["desktop_path"]:
            print(f"  üßæ .desktop : {info['desktop_path']}")
            print("  ‚îÄ‚îÄ Contenu :")
            print(info["desktop_content"])
        else:
            print("  üßæ .desktop : ‚ùå introuvable")

        if info["icon_path"]:
            print(f"  üñºÔ∏è Ic√¥ne    : {info['icon_path']}")
        else:
            print("  üñºÔ∏è Ic√¥ne    : ‚ùå introuvable")

        return
    
    # Int√©gration
    if not args.appimage:
        print("[!] Veuillez sp√©cifier un fichier .AppImage.")
        return

    file_path = Path(args.appimage).expanduser().resolve()

    try:
        print("[‚úì] V√©rification du fichier...")
        if not core.is_appimage(file_path):
            raise ValueError("Ce fichier n'est pas une AppImage valide.")

        print("[‚úì] D√©placement dans ~/Applications...")
        moved_path = core.move_appimage(file_path)

        print("[‚úì] Extraction temporaire...")
        extracted_dir = extractor.extract_appimage(moved_path)

        print("[‚úì] Recherche d‚Äôic√¥ne...")
        icon_path = extractor.find_icon_in_extract_dir(extracted_dir)

        final_icon = None
        if icon_path:
            icon_dest_dir = Path.home() / ".local/share/icons"
            icon_dest_dir.mkdir(parents=True, exist_ok=True)
            final_icon = icon_dest_dir / f"{moved_path.stem}.png"
            shutil.copy2(icon_path, final_icon)
            print(f"[‚úì] Ic√¥ne copi√©e : {final_icon}")
        else:
            print("[!] Aucune ic√¥ne trouv√©e, une valeur g√©n√©rique sera utilis√©e.")

        print("[‚úì] G√©n√©ration du fichier .desktop...")
        desktop_entry_path = desktop_entry.generate_desktop_entry(
            moved_path,
            icon_name=str(final_icon) if final_icon else None
        )

        print(f"[‚úÖ] Int√©gration termin√©e : {desktop_entry_path}")

    except Exception as e:
        print(f"[‚ùå] Erreur : {e}")


if __name__ == "__main__":
    main()
